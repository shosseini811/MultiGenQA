# Multi-stage Docker build for React/TypeScript frontend
# This creates a lightweight, secure production image by:
# 1. Building the React app in a full Node.js environment
# 2. Serving the built files with nginx in a minimal Alpine container

# ===== STAGE 1: BUILD ENVIRONMENT =====
# Build the React application with all development dependencies
FROM node:18-alpine AS builder

# Set working directory inside the container
WORKDIR /app

# Install build dependencies needed for native Node.js modules
# python3, make, g++ are required for modules with native code (like node-sass, canvas, etc.)
RUN apk add --no-cache python3 make g++

# Copy package files first for better Docker layer caching
# Docker layers are cached, so copying package.json first means dependency installation
# only runs when dependencies change, not when source code changes
COPY package*.json ./

# Install dependencies with exact versions for reproducible builds
# --only=production: Only install production dependencies (no devDependencies)
# --no-audit: Skip security audit for faster builds
# --no-fund: Skip funding message display
# npm ci uses package-lock.json for exact version installation
RUN npm ci --only=production --no-audit --no-fund

# Copy application source code and configuration
# We copy these after installing dependencies to leverage Docker layer caching
COPY src/ ./src/                # React components and TypeScript source
COPY public/ ./public/          # Static assets (index.html, favicon, etc.)
COPY tsconfig.json ./           # TypeScript compiler configuration

# Set production environment variables for optimized build
ENV NODE_ENV=production         # Enables production optimizations in React and webpack
ENV GENERATE_SOURCEMAP=false    # Disable source maps for smaller bundle size and security
ENV INLINE_RUNTIME_CHUNK=false  # Keep runtime chunk separate for better caching

# Build the React application for production
# This creates an optimized bundle in the /build directory
RUN npm run build

# Clean up build artifacts to reduce image size
# Remove source maps and license files that aren't needed in production
RUN find build -name "*.map" -delete && \
    find build -name "*.txt" -delete

# ===== STAGE 2: PRODUCTION ENVIRONMENT =====
# Create a lightweight production image with nginx to serve the built React app
FROM nginx:alpine as production

# Install security updates and required tools
# Always update base image packages for security
RUN apk update && apk upgrade && \
    apk add --no-cache curl && \    # curl needed for health checks
    rm -rf /var/cache/apk/*          # Clean up package cache to reduce image size

# Create non-root user for security best practices
# Running as non-root reduces attack surface and follows security guidelines
RUN addgroup -g 1001 -S nginx-app && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx-app -g nginx-app nginx-app

# Copy the built React application from the builder stage
# This transfers only the compiled static files, not the source code or node_modules
COPY --from=builder /app/build /usr/share/nginx/html

# Copy custom nginx configuration
# This configures nginx to serve the React SPA with proper routing and headers
COPY nginx.conf /etc/nginx/nginx.conf

# Create necessary directories and set proper permissions for non-root operation
# Nginx needs these directories for caching, logging, and temporary files
RUN mkdir -p /var/cache/nginx/client_temp && \     # Client request body temporary files
    mkdir -p /var/cache/nginx/proxy_temp && \      # Proxy cache temporary files
    mkdir -p /var/cache/nginx/fastcgi_temp && \    # FastCGI temporary files
    mkdir -p /var/cache/nginx/uwsgi_temp && \      # uWSGI temporary files
    mkdir -p /var/cache/nginx/scgi_temp && \       # SCGI temporary files
    mkdir -p /var/log/nginx && \                   # Nginx log files
    mkdir -p /var/run && \                         # Runtime files (PID, etc.)
    chown -R nginx-app:nginx-app /var/cache/nginx && \  # Grant ownership to non-root user
    chown -R nginx-app:nginx-app /var/log/nginx && \
    chown -R nginx-app:nginx-app /var/run && \
    chown -R nginx-app:nginx-app /usr/share/nginx/html && \  # Static files ownership
    chmod -R 755 /usr/share/nginx/html              # Set readable permissions

# Create custom error pages for better user experience
# These replace default nginx error pages with user-friendly messages
RUN echo '<!DOCTYPE html><html><head><title>404 Not Found</title></head><body><h1>404 - Page Not Found</h1><p>The requested page could not be found.</p></body></html>' > /usr/share/nginx/html/404.html && \
    echo '<!DOCTYPE html><html><head><title>50x Error</title></head><body><h1>Server Error</h1><p>Something went wrong on our end.</p></body></html>' > /usr/share/nginx/html/50x.html

# Switch to non-root user for security
# This ensures nginx runs with minimal privileges
USER nginx-app

# Expose ports for web traffic
EXPOSE 80 443 8080    # HTTP, HTTPS, and alternative HTTP port

# Health check to monitor container status
# Docker will mark container as unhealthy if this fails
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start nginx in foreground mode (required for Docker containers)
# daemon off ensures nginx doesn't run as background process
CMD ["nginx", "-g", "daemon off;"] 